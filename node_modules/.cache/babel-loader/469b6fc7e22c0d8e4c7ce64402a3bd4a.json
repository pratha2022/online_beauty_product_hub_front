{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onErrorResumeNext = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar noop_1 = require(\"../util/noop\");\n\nfunction onErrorResumeNext() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  var nextSources = argsOrArgArray_1.argsOrArgArray(sources);\n  return lift_1.operate(function (source, subscriber) {\n    var remaining = __spreadArray([source], __read(nextSources));\n\n    var subscribeNext = function subscribeNext() {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          var nextSource = void 0;\n\n          try {\n            nextSource = innerFrom_1.innerFrom(remaining.shift());\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          var innerSub = OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, noop_1.noop, noop_1.noop);\n          nextSource.subscribe(innerSub);\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n\nexports.onErrorResumeNext = onErrorResumeNext;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAiFA,SAAgBA,iBAAhB,GAAiC;AAC/B;;OAAA,yCAAyE;AAAzEC;;;AAMA,MAAMC,WAAW,GAAGC,gCAAeF,OAAf,CAApB;AAEA,SAAOG,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAMC,SAAS,kBAAIF,MAAJ,GAAUG,OAAKN,WAAL,CAAV,CAAf;;AACA,QAAMO,aAAa,GAAG,SAAhBA,aAAgB;AACpB,UAAI,CAACH,UAAU,CAACI,MAAhB,EAAwB;AACtB,YAAIH,SAAS,CAACI,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAIC,UAAU,SAAd;;AACA,cAAI;AACFA,sBAAU,GAAGC,sBAAyBN,SAAS,CAACO,KAAV,EAAzB,CAAb;AACD,WAFD,CAEE,OAAOC,GAAP,EAAY;AACZN,yBAAa;AACb;AACD;;AAMD,cAAMO,QAAQ,GAAGC,8CAAyBX,UAAzB,EAAqCY,SAArC,EAAgDC,WAAhD,EAAsDA,WAAtD,CAAjB;AACAP,oBAAU,CAACQ,SAAX,CAAqBJ,QAArB;AACAA,kBAAQ,CAACK,GAAT,CAAaZ,aAAb;AACD,SAhBD,MAgBO;AACLH,oBAAU,CAACgB,QAAX;AACD;AACF;AACF,KAtBD;;AAwBAb,iBAAa;AACd,GA3BM,CAAP;AA4BD;;AArCDc","names":["onErrorResumeNext","sources","nextSources","argsOrArgArray_1","lift_1","source","subscriber","remaining","__read","subscribeNext","closed","length","nextSource","innerFrom_1","shift","err","innerSub","OperatorSubscriber_1","undefined","noop_1","subscribe","add","complete","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n *\n * Subscribe to the next Observable after map fails\n *\n * ```ts\n * import { of, onErrorResumeNext, map } from 'rxjs';\n *\n * of(1, 2, 3, 0)\n *   .pipe(\n *     map(x => {\n *       if (x === 0) {\n *         throw Error();\n *       }\n *\n *       return 10 / x;\n *     }),\n *     onErrorResumeNext(of(1, 2, 3))\n *   )\n *   .subscribe({\n *     next: val => console.log(val),\n *     error: err => console.log(err),          // Will never be called.\n *     complete: () => console.log('that\\'s it!')\n *   });\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // 'that's it!'\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables passed either directly or as an array.\n * @return A function that returns an Observable that emits values from source\n * Observable, but - if it errors - subscribes to the next passed Observable\n * and so on, until it completes or runs out of Observables.\n */\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  // For some reason, TS 4.1 RC gets the inference wrong here and infers the\n  // result to be `A[number][]` - completely dropping the ObservableInput part\n  // of the type. This makes no sense whatsoever. As a workaround, the type is\n  // asserted explicitly.\n  const nextSources = argsOrArgArray(sources) as unknown as ObservableInputTuple<A>;\n\n  return operate((source, subscriber) => {\n    const remaining = [source, ...nextSources];\n    const subscribeNext = () => {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          let nextSource: Observable<A[number]>;\n          try {\n            nextSource = innerFrom<T | A[number]>(remaining.shift()!);\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          // Here we have to use one of our Subscribers, or it does not wire up\n          // The `closed` property of upstream Subscribers synchronously, that\n          // would result in situation were we could not stop a synchronous firehose\n          // with something like `take(3)`.\n          const innerSub = createOperatorSubscriber(subscriber, undefined, noop, noop);\n          nextSource.subscribe(innerSub);\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}