{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.window = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar noop_1 = require(\"../util/noop\");\n\nfunction window(windowBoundaries) {\n  return lift_1.operate(function (source, subscriber) {\n    var windowSubject = new Subject_1.Subject();\n    subscriber.next(windowSubject.asObservable());\n\n    var errorHandler = function errorHandler(err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    windowBoundaries.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject_1.Subject());\n    }, noop_1.noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}\n\nexports.window = window;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AA6CA,SAAgBA,MAAhB,CAA0BC,gBAA1B,EAA2D;AACzD,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,aAAa,GAAe,IAAIC,iBAAJ,EAAhC;AAEAF,cAAU,CAACG,IAAX,CAAgBF,aAAa,CAACG,YAAd,EAAhB;;AAEA,QAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5BL,mBAAa,CAACM,KAAd,CAAoBD,GAApB;AACAN,gBAAU,CAACO,KAAX,CAAiBD,GAAjB;AACD,KAHD;;AAMAP,UAAM,CAACS,SAAP,CACEC,8CACET,UADF,EAEE,UAACU,KAAD,EAAM;AAAK,0BAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEP,IAAf,CAAoBO,KAApB;AAA0B,KAFvC,EAGE;AACET,mBAAa,CAACU,QAAd;AACAX,gBAAU,CAACW,QAAX;AACD,KANH,EAOEN,YAPF,CADF;AAaAR,oBAAgB,CAACW,SAAjB,CACEC,8CACET,UADF,EAEE;AACEC,mBAAa,CAACU,QAAd;AACAX,gBAAU,CAACG,IAAX,CAAiBF,aAAa,GAAG,IAAIC,iBAAJ,EAAjC;AACD,KALH,EAMEU,WANF,EAOEP,YAPF,CADF;AAYA,WAAO;AAILJ,mBAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEY,WAAf;AACAZ,mBAAa,GAAG,IAAhB;AACD,KAND;AAOD,GA3CM,CAAP;AA4CD;;AA7CDa","names":["window","windowBoundaries","lift_1","source","subscriber","windowSubject","Subject_1","next","asObservable","errorHandler","err","error","subscribe","OperatorSubscriber_1","value","complete","noop_1","unsubscribe","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const sec = interval(1000);\n * const result = clicks.pipe(\n *   window(sec),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    windowBoundaries.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"script"}