{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchScan = void 0;\n\nvar switchMap_1 = require(\"./switchMap\");\n\nvar lift_1 = require(\"../util/lift\");\n\nfunction switchScan(accumulator, seed) {\n  return lift_1.operate(function (source, subscriber) {\n    var state = seed;\n    switchMap_1.switchMap(function (value, index) {\n      return accumulator(state, value, index);\n    }, function (_, innerValue) {\n      return state = innerValue, innerValue;\n    })(source).subscribe(subscriber);\n    return function () {\n      state = null;\n    };\n  });\n}\n\nexports.switchScan = switchScan;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAqBA,SAAgBA,UAAhB,CACEC,WADF,EAEEC,IAFF,EAES;AAEP,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAGhC,QAAIC,KAAK,GAAGJ,IAAZ;AAKAK,0BAGE,UAACC,KAAD,EAAWC,KAAX,EAAgB;AAAK,wBAAW,CAACH,KAAD,EAAQE,KAAR,EAAeC,KAAf,CAAX;AAAgC,KAHvD,EAME,UAACC,CAAD,EAAIC,UAAJ,EAAc;AAAK,aAAEL,KAAK,GAAGK,UAAT,EAAsBA,UAAvB;AAAkC,KANvD,EAOEP,MAPF,EAOUQ,SAPV,CAOoBP,UAPpB;AASA,WAAO;AAELC,WAAK,GAAG,IAAR;AACD,KAHD;AAID,GArBM,CAAP;AAsBD;;AA1BDO","names":["switchScan","accumulator","seed","lift_1","source","subscriber","state","switchMap_1","value","index","_","innerValue","subscribe","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/switchScan.ts"],"sourcesContent":["import { ObservableInput, ObservedValueOf, OperatorFunction } from '../types';\nimport { switchMap } from './switchMap';\nimport { operate } from '../util/lift';\n\n// TODO: Generate a marble diagram for these docs.\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, emitting values\n * only from the most recently returned Observable.\n *\n * <span class=\"informal\">It's like {@link mergeScan}, but only the most recent\n * Observable returned by the accumulator is merged into the outer Observable.</span>\n *\n * @see {@link scan}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @return A function that returns an observable of the accumulated values.\n */\nexport function switchScan<T, R, O extends ObservableInput<any>>(\n  accumulator: (acc: R, value: T, index: number) => O,\n  seed: R\n): OperatorFunction<T, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    // The state we will keep up to date to pass into our\n    // accumulator function at each new value from the source.\n    let state = seed;\n\n    // Use `switchMap` on our `source` to do the work of creating\n    // this operator. Note the backwards order here of `switchMap()(source)`\n    // to avoid needing to use `pipe` unnecessarily\n    switchMap(\n      // On each value from the source, call the accumulator with\n      // our previous state, the value and the index.\n      (value: T, index) => accumulator(state, value, index),\n      // Using the deprecated result selector here as a dirty trick\n      // to update our state with the flattened value.\n      (_, innerValue) => ((state = innerValue), innerValue)\n    )(source).subscribe(subscriber);\n\n    return () => {\n      // Release state on finalization\n      state = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"script"}