{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowToggle = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar Subscription_1 = require(\"../Subscription\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar noop_1 = require(\"../util/noop\");\n\nvar arrRemove_1 = require(\"../util/arrRemove\");\n\nfunction windowToggle(openings, closingSelector) {\n  return lift_1.operate(function (source, subscriber) {\n    var windows = [];\n\n    var handleError = function handleError(err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    };\n\n    innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject_1.Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription_1.Subscription();\n\n      var closeWindow = function closeWindow() {\n        arrRemove_1.arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));\n    }, noop_1.noop));\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      var windowsCopy = windows.slice();\n\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}\n\nexports.windowToggle = windowToggle;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAiDA,SAAgBA,YAAhB,CACEC,QADF,EAEEC,eAFF,EAEyD;AAEvD,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAMC,OAAO,GAAiB,EAA9B;;AAEA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3B,aAAO,IAAIF,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBC,KAAjB,CAAuBH,GAAvB;AACD;;AACDH,gBAAU,CAACM,KAAX,CAAiBH,GAAjB;AACD,KALD;;AAOAI,0BAAUX,QAAV,EAAoBY,SAApB,CACEC,8CACET,UADF,EAEE,UAACU,SAAD,EAAU;AACR,UAAMC,MAAM,GAAG,IAAIC,iBAAJ,EAAf;AACAX,aAAO,CAACY,IAAR,CAAaF,MAAb;AACA,UAAMG,mBAAmB,GAAG,IAAIC,2BAAJ,EAA5B;;AACA,UAAMC,WAAW,GAAG,SAAdA,WAAc;AAClBC,8BAAUhB,OAAV,EAAmBU,MAAnB;AACAA,cAAM,CAACO,QAAP;AACAJ,2BAAmB,CAACK,WAApB;AACD,OAJD;;AAMA,UAAIC,eAAJ;;AACA,UAAI;AACFA,uBAAe,GAAGb,sBAAUV,eAAe,CAACa,SAAD,CAAzB,CAAlB;AACD,OAFD,CAEE,OAAOP,GAAP,EAAY;AACZD,mBAAW,CAACC,GAAD,CAAX;AACA;AACD;;AAEDH,gBAAU,CAACqB,IAAX,CAAgBV,MAAM,CAACW,YAAP,EAAhB;AAEAR,yBAAmB,CAACS,GAApB,CAAwBH,eAAe,CAACZ,SAAhB,CAA0BC,8CAAyBT,UAAzB,EAAqCgB,WAArC,EAAkDQ,WAAlD,EAAwDtB,WAAxD,CAA1B,CAAxB;AACD,KAvBH,EAwBEsB,WAxBF,CADF;AA8BAzB,UAAM,CAACS,SAAP,CACEC,8CACET,UADF,EAEE,UAACyB,KAAD,EAAS;;;AAGP,UAAMC,WAAW,GAAGzB,OAAO,CAAC0B,KAAR,EAApB;;;AACA,aAAqB,2CAAWC,sCAAhC,EAAgC,qBAAhC,EAAgCA,sCAAhC,EAAkC;AAA7B,cAAMC,QAAM,wBAAZ;AACHA,kBAAM,CAACR,IAAP,CAAYI,KAAZ;AACD;;;;;;;;;;;;AACF,KATH,EAUE;AAEE,aAAO,IAAIxB,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBa,QAAjB;AACD;;AACDlB,gBAAU,CAACkB,QAAX;AACD,KAhBH,EAiBEhB,WAjBF,EAkBE;AAME,aAAO,IAAID,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBc,WAAjB;AACD;AACF,KA3BH,CADF;AA+BD,GAvEM,CAAP;AAwED;;AA5EDW","names":["windowToggle","openings","closingSelector","lift_1","source","subscriber","windows","handleError","err","length","shift","error","innerFrom_1","subscribe","OperatorSubscriber_1","openValue","window","Subject_1","push","closingSubscription","Subscription_1","closeWindow","arrRemove_1","complete","unsubscribe","closingNotifier","next","asObservable","add","noop_1","value","windowsCopy","slice","windowsCopy_1_1","window_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/windowToggle.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits a next notification, signals that the\n * associated window should complete.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (openValue: O) => ObservableInput<any>\n): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    const windows: Subject<T>[] = [];\n\n    const handleError = (err: any) => {\n      while (0 < windows.length) {\n        windows.shift()!.error(err);\n      }\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const window = new Subject<T>();\n          windows.push(window);\n          const closingSubscription = new Subscription();\n          const closeWindow = () => {\n            arrRemove(windows, window);\n            window.complete();\n            closingSubscription.unsubscribe();\n          };\n\n          let closingNotifier: Observable<any>;\n          try {\n            closingNotifier = innerFrom(closingSelector(openValue));\n          } catch (err) {\n            handleError(err);\n            return;\n          }\n\n          subscriber.next(window.asObservable());\n\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        },\n        noop\n      )\n    );\n\n    // Subcribe to the source to get things started.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Copy the windows array before we emit to\n          // make sure we don't have issues with reentrant code.\n          const windowsCopy = windows.slice();\n          for (const window of windowsCopy) {\n            window.next(value);\n          }\n        },\n        () => {\n          // Complete all of our windows before we complete.\n          while (0 < windows.length) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Add this finalization so that all window subjects are\n          // disposed of. This way, if a user tries to subscribe\n          // to a window *after* the outer subscription has been unsubscribed,\n          // they will get an error, instead of waiting forever to\n          // see if a value arrives.\n          while (0 < windows.length) {\n            windows.shift()!.unsubscribe();\n          }\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}