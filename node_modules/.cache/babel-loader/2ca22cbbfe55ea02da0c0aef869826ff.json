{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportUnhandledError = void 0;\n\nvar config_1 = require(\"../config\");\n\nvar timeoutProvider_1 = require(\"../scheduler/timeoutProvider\");\n\nfunction reportUnhandledError(err) {\n  timeoutProvider_1.timeoutProvider.setTimeout(function () {\n    var onUnhandledError = config_1.config.onUnhandledError;\n\n    if (onUnhandledError) {\n      onUnhandledError(err);\n    } else {\n      throw err;\n    }\n  });\n}\n\nexports.reportUnhandledError = reportUnhandledError;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAWA,SAAgBA,oBAAhB,CAAqCC,GAArC,EAA6C;AAC3CC,oCAAgBC,UAAhB,CAA2B;AACjB,wBAAgB,GAAKC,gBAAMC,gBAA3B;;AACR,QAAIA,gBAAJ,EAAsB;AAEpBA,sBAAgB,CAACJ,GAAD,CAAhB;AACD,KAHD,MAGO;AAEL,YAAMA,GAAN;AACD;AACF,GATD;AAUD;;AAXDK","names":["reportUnhandledError","err","timeoutProvider_1","setTimeout","config_1","onUnhandledError","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/util/reportUnhandledError.ts"],"sourcesContent":["import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}