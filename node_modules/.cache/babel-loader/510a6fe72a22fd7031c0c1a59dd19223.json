{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectable = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar Observable_1 = require(\"../Observable\");\n\nvar defer_1 = require(\"./defer\");\n\nvar DEFAULT_CONFIG = {\n  connector: function connector() {\n    return new Subject_1.Subject();\n  },\n  resetOnDisconnect: true\n};\n\nfunction connectable(source, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG;\n  }\n\n  var connection = null;\n  var connector = config.connector,\n      _a = config.resetOnDisconnect,\n      resetOnDisconnect = _a === void 0 ? true : _a;\n  var subject = connector();\n  var result = new Observable_1.Observable(function (subscriber) {\n    return subject.subscribe(subscriber);\n  });\n\n  result.connect = function () {\n    if (!connection || connection.closed) {\n      connection = defer_1.defer(function () {\n        return source;\n      }).subscribe(subject);\n\n      if (resetOnDisconnect) {\n        connection.add(function () {\n          return subject = connector();\n        });\n      }\n    }\n\n    return connection;\n  };\n\n  return result;\n}\n\nexports.connectable = connectable;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;;AACA;;AAsBA,IAAMA,cAAc,GAA+B;AACjDC,WAAS,EAAE;AAAM,eAAIC,iBAAJ;AAAsB,GADU;AAEjDC,mBAAiB,EAAE;AAF8B,CAAnD;;AAaA,SAAgBC,WAAhB,CAA+BC,MAA/B,EAA2DC,MAA3D,EAAwG;AAA7C;AAAAA;AAA6C;;AAEtG,MAAIC,UAAU,GAAwB,IAAtC;AACQ,eAAS,GAA+BD,MAAM,UAA9C;AAAA,MAAWE,KAA6BF,MAAM,kBAA9C;AAAA,MAAWH,iBAAiB,mBAAG,IAAH,GAAOK,EAAnC;AACR,MAAIC,OAAO,GAAGR,SAAS,EAAvB;AAEA,MAAMS,MAAM,GAAQ,IAAIC,uBAAJ,CAAkB,UAACC,UAAD,EAAW;AAC/C,WAAOH,OAAO,CAACI,SAAR,CAAkBD,UAAlB,CAAP;AACD,GAFmB,CAApB;;AAOAF,QAAM,CAACI,OAAP,GAAiB;AACf,QAAI,CAACP,UAAD,IAAeA,UAAU,CAACQ,MAA9B,EAAsC;AACpCR,gBAAU,GAAGS,cAAM;AAAM;AAAM,OAAlB,EAAoBH,SAApB,CAA8BJ,OAA9B,CAAb;;AACA,UAAIN,iBAAJ,EAAuB;AACrBI,kBAAU,CAACU,GAAX,CAAe;AAAM,iBAACR,OAAO,GAAGR,SAAS,EAApB;AAAuB,SAA5C;AACD;AACF;;AACD,WAAOM,UAAP;AACD,GARD;;AAUA,SAAOG,MAAP;AACD;;AAxBDQ","names":["DEFAULT_CONFIG","connector","Subject_1","resetOnDisconnect","connectable","source","config","connection","_a","subject","result","Observable_1","subscriber","subscribe","connect","closed","defer_1","add","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/observable/connectable.ts"],"sourcesContent":["import { Connectable, ObservableInput, SubjectLike } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\n\nexport interface ConnectableConfig<T> {\n  /**\n   * A factory function used to create the Subject through which the source\n   * is multicast. By default this creates a {@link Subject}.\n   */\n  connector: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state upon disconnetion\n   * and return to a \"cold\" state. This allows the resulting observable to be\n   * reconnected.\n   * If false, upon disconnection, the connecting subject will remain the\n   * connecting subject, meaning the resulting observable will not go \"cold\" again,\n   * and subsequent repeats or resubscriptions will resubscribe to that same subject.\n   */\n  resetOnDisconnect?: boolean;\n}\n\n/**\n * The default configuration for `connectable`.\n */\nconst DEFAULT_CONFIG: ConnectableConfig<unknown> = {\n  connector: () => new Subject<unknown>(),\n  resetOnDisconnect: true,\n};\n\n/**\n * Creates an observable that multicasts once `connect()` is called on it.\n *\n * @param source The observable source to make connectable.\n * @param config The configuration object for `connectable`.\n * @returns A \"connectable\" observable, that has a `connect()` method, that you must call to\n * connect the source to all consumers through the subject provided as the connector.\n */\nexport function connectable<T>(source: ObservableInput<T>, config: ConnectableConfig<T> = DEFAULT_CONFIG): Connectable<T> {\n  // The subscription representing the connection.\n  let connection: Subscription | null = null;\n  const { connector, resetOnDisconnect = true } = config;\n  let subject = connector();\n\n  const result: any = new Observable<T>((subscriber) => {\n    return subject.subscribe(subscriber);\n  });\n\n  // Define the `connect` function. This is what users must call\n  // in order to \"connect\" the source to the subject that is\n  // multicasting it.\n  result.connect = () => {\n    if (!connection || connection.closed) {\n      connection = defer(() => source).subscribe(subject);\n      if (resetOnDisconnect) {\n        connection.add(() => (subject = connector()));\n      }\n    }\n    return connection;\n  };\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}