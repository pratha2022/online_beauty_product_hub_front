{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferCount = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar arrRemove_1 = require(\"../util/arrRemove\");\n\nfunction bufferCount(bufferSize, startBufferEvery) {\n  if (startBufferEvery === void 0) {\n    startBufferEvery = null;\n  }\n\n  startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;\n  return lift_1.operate(function (source, subscriber) {\n    var buffers = [];\n    var count = 0;\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a, e_2, _b;\n\n      var toEmit = null;\n\n      if (count++ % startBufferEvery === 0) {\n        buffers.push([]);\n      }\n\n      try {\n        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {\n          var buffer = buffers_1_1.value;\n          buffer.push(value);\n\n          if (bufferSize <= buffer.length) {\n            toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];\n            toEmit.push(buffer);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      if (toEmit) {\n        try {\n          for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {\n            var buffer = toEmit_1_1.value;\n            arrRemove_1.arrRemove(buffers, buffer);\n            subscriber.next(buffer);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    }, function () {\n      var e_3, _a;\n\n      try {\n        for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {\n          var buffer = buffers_2_1.value;\n          subscriber.next(buffer);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n\n      subscriber.complete();\n    }, undefined, function () {\n      buffers = null;\n    }));\n  });\n}\n\nexports.bufferCount = bufferCount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAqDA,SAAgBA,WAAhB,CAA+BC,UAA/B,EAAmDC,gBAAnD,EAAyF;AAAtC;AAAAA;AAAsC;;AAGvFA,kBAAgB,GAAGA,gBAAgB,SAAhB,oBAAgB,WAAhB,sBAAoBD,UAAvC;AAEA,SAAOE,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,OAAO,GAAU,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAH,UAAM,CAACI,SAAP,CACEC,8CACEJ,UADF,EAEE,UAACK,KAAD,EAAM;;;AACJ,UAAIC,MAAM,GAAiB,IAA3B;;AAKA,UAAIJ,KAAK,KAAKL,gBAAV,KAAgC,CAApC,EAAuC;AACrCI,eAAO,CAACM,IAAR,CAAa,EAAb;AACD;;;AAGD,aAAqB,mCAAOC,8BAA5B,EAA4B,iBAA5B,EAA4BA,8BAA5B,EAA8B;AAAzB,cAAMC,MAAM,oBAAZ;AACHA,gBAAM,CAACF,IAAP,CAAYF,KAAZ;;AAMA,cAAIT,UAAU,IAAIa,MAAM,CAACC,MAAzB,EAAiC;AAC/BJ,kBAAM,GAAGA,MAAM,SAAN,UAAM,WAAN,YAAU,EAAnB;AACAA,kBAAM,CAACC,IAAP,CAAYE,MAAZ;AACD;AACF;;;;;;;;;;;;;AAED,UAAIH,MAAJ,EAAY;;AAIV,eAAqB,iCAAMK,4BAA3B,EAA2B,gBAA3B,EAA2BA,4BAA3B,EAA6B;AAAxB,gBAAMF,MAAM,mBAAZ;AACHG,kCAAUX,OAAV,EAAmBQ,MAAnB;AACAT,sBAAU,CAACa,IAAX,CAAgBJ,MAAhB;AACD;;;;;;;;;;;;AACF;AACF,KAnCH,EAoCE;;;;AAGE,aAAqB,mCAAOK,8BAA5B,EAA4B,iBAA5B,EAA4BA,8BAA5B,EAA8B;AAAzB,cAAML,MAAM,oBAAZ;AACHT,oBAAU,CAACa,IAAX,CAAgBJ,MAAhB;AACD;;;;;;;;;;;;;AACDT,gBAAU,CAACe,QAAX;AACD,KA3CH,EA6CEC,SA7CF,EA8CE;AAEEf,aAAO,GAAG,IAAV;AACD,KAjDH,CADF;AAqDD,GAzDM,CAAP;AA0DD;;AA/DDgB","names":["bufferCount","bufferSize","startBufferEvery","lift_1","source","subscriber","buffers","count","subscribe","OperatorSubscriber_1","value","toEmit","push","buffers_1_1","buffer","length","toEmit_1_1","arrRemove_1","next","buffers_2_1","complete","undefined","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/bufferCount.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent, bufferCount } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent, bufferCount } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number | null = null): OperatorFunction<T, T[]> {\n  // If no `startBufferEvery` value was supplied, then we're\n  // opening and closing on the bufferSize itself.\n  startBufferEvery = startBufferEvery ?? bufferSize;\n\n  return operate((source, subscriber) => {\n    let buffers: T[][] = [];\n    let count = 0;\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          let toEmit: T[][] | null = null;\n\n          // Check to see if we need to start a buffer.\n          // This will start one at the first value, and then\n          // a new one every N after that.\n          if (count++ % startBufferEvery! === 0) {\n            buffers.push([]);\n          }\n\n          // Push our value into our active buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n            // Check to see if we're over the bufferSize\n            // if we are, record it so we can emit it later.\n            // If we emitted it now and removed it, it would\n            // mutate the `buffers` array while we're looping\n            // over it.\n            if (bufferSize <= buffer.length) {\n              toEmit = toEmit ?? [];\n              toEmit.push(buffer);\n            }\n          }\n\n          if (toEmit) {\n            // We have found some buffers that are over the\n            // `bufferSize`. Emit them, and remove them from our\n            // buffers list.\n            for (const buffer of toEmit) {\n              arrRemove(buffers, buffer);\n              subscriber.next(buffer);\n            }\n          }\n        },\n        () => {\n          // When the source completes, emit all of our\n          // active buffers.\n          for (const buffer of buffers) {\n            subscriber.next(buffer);\n          }\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Clean up our memory when we finalize\n          buffers = null!;\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}