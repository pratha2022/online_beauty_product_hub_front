{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.takeUntil = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar noop_1 = require(\"../util/noop\");\n\nfunction takeUntil(notifier) {\n  return lift_1.operate(function (source, subscriber) {\n    innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      return subscriber.complete();\n    }, noop_1.noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n\nexports.takeUntil = takeUntil;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAyCA,SAAgBA,SAAhB,CAA6BC,QAA7B,EAA2D;AACzD,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChCC,0BAAUJ,QAAV,EAAoBK,SAApB,CAA8BC,8CAAyBH,UAAzB,EAAqC;AAAM,uBAAU,CAACI,QAAX;AAAqB,KAAhE,EAAkEC,WAAlE,CAA9B;AACA,KAACL,UAAU,CAACM,MAAZ,IAAsBP,MAAM,CAACG,SAAP,CAAiBF,UAAjB,CAAtB;AACD,GAHM,CAAP;AAID;;AALDO","names":["takeUntil","notifier","lift_1","source","subscriber","innerFrom_1","subscribe","OperatorSubscriber_1","complete","noop_1","closed","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/takeUntil.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n *\n * Tick every second until the first click happens\n *\n * ```ts\n * import { interval, fromEvent, takeUntil } from 'rxjs';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}