{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.skipUntil = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar noop_1 = require(\"../util/noop\");\n\nfunction skipUntil(notifier) {\n  return lift_1.operate(function (source, subscriber) {\n    var taking = false;\n    var skipSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();\n      taking = true;\n    }, noop_1.noop);\n    innerFrom_1.innerFrom(notifier).subscribe(skipSubscriber);\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return taking && subscriber.next(value);\n    }));\n  });\n}\n\nexports.skipUntil = skipUntil;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AA4CA,SAAgBA,SAAhB,CAA6BC,QAA7B,EAAsD;AACpD,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,MAAM,GAAG,KAAb;AAEA,QAAMC,cAAc,GAAGC,8CACrBH,UADqB,EAErB;AACEE,oBAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEE,WAAhB;AACAH,YAAM,GAAG,IAAT;AACD,KALoB,EAMrBI,WANqB,CAAvB;AASAC,0BAAUT,QAAV,EAAoBU,SAApB,CAA8BL,cAA9B;AAEAH,UAAM,CAACQ,SAAP,CAAiBJ,8CAAyBH,UAAzB,EAAqC,UAACQ,KAAD,EAAM;AAAK,mBAAM,IAAIR,UAAU,CAACS,IAAX,CAAgBD,KAAhB,CAAV;AAAgC,KAAhF,CAAjB;AACD,GAfM,CAAP;AAgBD;;AAjBDE","names":["skipUntil","notifier","lift_1","source","subscriber","taking","skipSubscriber","OperatorSubscriber_1","unsubscribe","noop_1","innerFrom_1","subscribe","value","next","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/skipUntil.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * The `skipUntil` operator causes the observable stream to skip the emission of values until the passed in observable emits the first value.\n * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\n *\n * ![](skipUntil.png)\n *\n * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\n * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\n * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\n * a value before.\n *\n * ## Example\n *\n * In the following example, all emitted values of the interval observable are skipped until the user clicks anywhere within the page\n *\n * ```ts\n * import { interval, fromEvent, skipUntil } from 'rxjs';\n *\n * const intervalObservable = interval(1000);\n * const click = fromEvent(document, 'click');\n *\n * const emitAfterClick = intervalObservable.pipe(\n *   skipUntil(click)\n * );\n * // clicked at 4.6s. output: 5...6...7...8........ or\n * // clicked at 7.3s. output: 8...9...10..11.......\n * emitAfterClick.subscribe(value => console.log(value));\n * ```\n *\n * @see {@link last}\n * @see {@link skip}\n * @see {@link skipWhile}\n * @see {@link skipLast}\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return A function that returns an Observable that skips items from the\n * source Observable until the second Observable emits an item, then emits the\n * remaining items.\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n\n    const skipSubscriber = createOperatorSubscriber(\n      subscriber,\n      () => {\n        skipSubscriber?.unsubscribe();\n        taking = true;\n      },\n      noop\n    );\n\n    innerFrom(notifier).subscribe(skipSubscriber);\n\n    source.subscribe(createOperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));\n  });\n}\n"]},"metadata":{},"sourceType":"script"}