{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduled = void 0;\n\nvar scheduleObservable_1 = require(\"./scheduleObservable\");\n\nvar schedulePromise_1 = require(\"./schedulePromise\");\n\nvar scheduleArray_1 = require(\"./scheduleArray\");\n\nvar scheduleIterable_1 = require(\"./scheduleIterable\");\n\nvar scheduleAsyncIterable_1 = require(\"./scheduleAsyncIterable\");\n\nvar isInteropObservable_1 = require(\"../util/isInteropObservable\");\n\nvar isPromise_1 = require(\"../util/isPromise\");\n\nvar isArrayLike_1 = require(\"../util/isArrayLike\");\n\nvar isIterable_1 = require(\"../util/isIterable\");\n\nvar isAsyncIterable_1 = require(\"../util/isAsyncIterable\");\n\nvar throwUnobservableError_1 = require(\"../util/throwUnobservableError\");\n\nvar isReadableStreamLike_1 = require(\"../util/isReadableStreamLike\");\n\nvar scheduleReadableStreamLike_1 = require(\"./scheduleReadableStreamLike\");\n\nfunction scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable_1.isInteropObservable(input)) {\n      return scheduleObservable_1.scheduleObservable(input, scheduler);\n    }\n\n    if (isArrayLike_1.isArrayLike(input)) {\n      return scheduleArray_1.scheduleArray(input, scheduler);\n    }\n\n    if (isPromise_1.isPromise(input)) {\n      return schedulePromise_1.schedulePromise(input, scheduler);\n    }\n\n    if (isAsyncIterable_1.isAsyncIterable(input)) {\n      return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);\n    }\n\n    if (isIterable_1.isIterable(input)) {\n      return scheduleIterable_1.scheduleIterable(input, scheduler);\n    }\n\n    if (isReadableStreamLike_1.isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n\n  throw throwUnobservableError_1.createInvalidObservableTypeError(input);\n}\n\nexports.scheduled = scheduled;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AAaA,SAAgBA,SAAhB,CAA6BC,KAA7B,EAAwDC,SAAxD,EAAgF;AAC9E,MAAID,KAAK,IAAI,IAAb,EAAmB;AACjB,QAAIE,0CAAoBF,KAApB,CAAJ,EAAgC;AAC9B,aAAOG,wCAAmBH,KAAnB,EAA0BC,SAA1B,CAAP;AACD;;AACD,QAAIG,0BAAYJ,KAAZ,CAAJ,EAAwB;AACtB,aAAOK,8BAAcL,KAAd,EAAqBC,SAArB,CAAP;AACD;;AACD,QAAIK,sBAAUN,KAAV,CAAJ,EAAsB;AACpB,aAAOO,kCAAgBP,KAAhB,EAAuBC,SAAvB,CAAP;AACD;;AACD,QAAIO,kCAAgBR,KAAhB,CAAJ,EAA4B;AAC1B,aAAOS,8CAAsBT,KAAtB,EAA6BC,SAA7B,CAAP;AACD;;AACD,QAAIS,wBAAWV,KAAX,CAAJ,EAAuB;AACrB,aAAOW,oCAAiBX,KAAjB,EAAwBC,SAAxB,CAAP;AACD;;AACD,QAAIW,4CAAqBZ,KAArB,CAAJ,EAAiC;AAC/B,aAAOa,wDAA2Bb,KAA3B,EAAkCC,SAAlC,CAAP;AACD;AACF;;AACD,QAAMa,0DAAiCd,KAAjC,CAAN;AACD;;AAtBDe","names":["scheduled","input","scheduler","isInteropObservable_1","scheduleObservable_1","isArrayLike_1","scheduleArray_1","isPromise_1","schedulePromise_1","isAsyncIterable_1","scheduleAsyncIterable_1","isIterable_1","scheduleIterable_1","isReadableStreamLike_1","scheduleReadableStreamLike_1","throwUnobservableError_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/scheduled/scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n"]},"metadata":{},"sourceType":"script"}