{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.raceInit = exports.race = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar innerFrom_1 = require(\"./innerFrom\");\n\nvar argsOrArgArray_1 = require(\"../util/argsOrArgArray\");\n\nvar OperatorSubscriber_1 = require(\"../operators/OperatorSubscriber\");\n\nfunction race() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  sources = argsOrArgArray_1.argsOrArgArray(sources);\n  return sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : new Observable_1.Observable(raceInit(sources));\n}\n\nexports.race = race;\n\nfunction raceInit(sources) {\n  return function (subscriber) {\n    var subscriptions = [];\n\n    var _loop_1 = function _loop_1(i) {\n      subscriptions.push(innerFrom_1.innerFrom(sources[i]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n        if (subscriptions) {\n          for (var s = 0; s < subscriptions.length; s++) {\n            s !== i && subscriptions[s].unsubscribe();\n          }\n\n          subscriptions = null;\n        }\n\n        subscriber.next(value);\n      })));\n    };\n\n    for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      _loop_1(i);\n    }\n  };\n}\n\nexports.raceInit = raceInit;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAGA;;AACA;;AA6CA,SAAgBA,IAAhB,GAAoB;AAAI;;OAAA,yCAAyD;AAAzDC;;;AACtBA,SAAO,GAAGC,gCAAeD,OAAf,CAAV;AAEA,SAAOA,OAAO,CAACE,MAAR,KAAmB,CAAnB,GAAuBC,sBAAUH,OAAO,CAAC,CAAD,CAAjB,CAAvB,GAAqE,IAAII,uBAAJ,CAAkBC,QAAQ,CAACL,OAAD,CAA1B,CAA5E;AACD;;AAJDM;;AAWA,SAAgBD,QAAhB,CAA4BL,OAA5B,EAAyD;AACvD,SAAO,UAACO,UAAD,EAA0B;AAC/B,QAAIC,aAAa,GAAmB,EAApC;;mCAMSC,GAAC;AACRD,mBAAa,CAACE,IAAd,CACEP,sBAAUH,OAAO,CAACS,CAAD,CAAjB,EAA4CE,SAA5C,CACEC,8CAAyBL,UAAzB,EAAqC,UAACM,KAAD,EAAM;AACzC,YAAIL,aAAJ,EAAmB;AAGjB,eAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,aAAa,CAACN,MAAlC,EAA0CY,CAAC,EAA3C,EAA+C;AAC7CA,aAAC,KAAKL,CAAN,IAAWD,aAAa,CAACM,CAAD,CAAb,CAAiBC,WAAjB,EAAX;AACD;;AACDP,uBAAa,GAAG,IAAhB;AACD;;AACDD,kBAAU,CAACS,IAAX,CAAgBH,KAAhB;AACD,OAVD,CADF,CADF;;;AADF,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBD,aAAa,IAAI,CAACD,UAAU,CAACU,MAA7B,IAAuCR,CAAC,GAAGT,OAAO,CAACE,MAAnE,EAA2EO,CAAC,EAA5E,EAA8E;cAArEA;AAgBR;AACF,GAxBD;AAyBD;;AA1BDH","names":["race","sources","argsOrArgArray_1","length","innerFrom_1","Observable_1","raceInit","exports","subscriber","subscriptions","i","push","subscribe","OperatorSubscriber_1","value","s","unsubscribe","next","closed"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/observable/race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { Subscriber } from '../Subscriber';\n\nexport function race<T extends readonly unknown[]>(inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function race<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\n\n/**\n * Returns an observable that mirrors the first source observable to emit an item.\n *\n * ![](race.png)\n *\n * `race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\n * As soon as one of the source observables emits a value, the result unsubscribes from the other sources.\n * The resulting observable will forward all notifications, including error and completion, from the \"winning\"\n * source observable.\n *\n * If one of the used source observable throws an errors before a first notification\n * the race operator will also throw an error, no matter if another source observable\n * could potentially win the race.\n *\n * `race` can be useful for selecting the response from the fastest network connection for\n * HTTP or WebSockets. `race` can also be useful for switching observable context based on user\n * input.\n *\n * ## Example\n *\n * Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { interval, map, race } from 'rxjs';\n *\n * const obs1 = interval(7000).pipe(map(() => 'slow one'));\n * const obs2 = interval(3000).pipe(map(() => 'fast one'));\n * const obs3 = interval(5000).pipe(map(() => 'medium one'));\n *\n * race(obs1, obs2, obs3)\n *   .subscribe(winner => console.log(winner));\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n */\nexport function race<T>(...sources: (ObservableInput<T> | ObservableInput<T>[])[]): Observable<any> {\n  sources = argsOrArgArray(sources);\n  // If only one source was passed, just return it. Otherwise return the race.\n  return sources.length === 1 ? innerFrom(sources[0] as ObservableInput<T>) : new Observable<T>(raceInit(sources as ObservableInput<T>[]));\n}\n\n/**\n * An observable initializer function for both the static version and the\n * operator version of race.\n * @param sources The sources to race\n */\nexport function raceInit<T>(sources: ObservableInput<T>[]) {\n  return (subscriber: Subscriber<T>) => {\n    let subscriptions: Subscription[] = [];\n\n    // Subscribe to all of the sources. Note that we are checking `subscriptions` here\n    // Is is an array of all actively \"racing\" subscriptions, and it is `null` after the\n    // race has been won. So, if we have racer that synchronously \"wins\", this loop will\n    // stop before it subscribes to any more.\n    for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      subscriptions.push(\n        innerFrom(sources[i] as ObservableInput<T>).subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            if (subscriptions) {\n              // We're still racing, but we won! So unsubscribe\n              // all other subscriptions that we have, except this one.\n              for (let s = 0; s < subscriptions.length; s++) {\n                s !== i && subscriptions[s].unsubscribe();\n              }\n              subscriptions = null!;\n            }\n            subscriber.next(value);\n          })\n        )\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}