{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowCount = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nfunction windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return lift_1.operate(function (source, subscriber) {\n    var windows = [new Subject_1.Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var c = count - windowSize + 1;\n\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject_1.Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}\n\nexports.windowCount = windowCount;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AACA;;AAgEA,SAAgBA,WAAhB,CAA+BC,UAA/B,EAAmDC,gBAAnD,EAA+E;AAA5B;AAAAA;AAA4B;;AAC7E,MAAMC,UAAU,GAAGD,gBAAgB,GAAG,CAAnB,GAAuBA,gBAAvB,GAA0CD,UAA7D;AAEA,SAAOG,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,OAAO,GAAG,CAAC,IAAIC,iBAAJ,EAAD,CAAd;AACA,QAAIC,MAAM,GAAa,EAAvB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAGAJ,cAAU,CAACK,IAAX,CAAgBJ,OAAO,CAAC,CAAD,CAAP,CAAWK,YAAX,EAAhB;AAEAP,UAAM,CAACQ,SAAP,CACEC,8CACER,UADF,EAEE,UAACS,KAAD,EAAS;;;;AAIP,aAAqB,mCAAOC,8BAA5B,EAA4B,iBAA5B,EAA4BA,8BAA5B,EAA8B;AAAzB,cAAMC,QAAM,oBAAZ;AACHA,kBAAM,CAACN,IAAP,CAAYI,KAAZ;AACD;;;;;;;;;;;;;AAMD,UAAMG,CAAC,GAAGR,KAAK,GAAGT,UAAR,GAAqB,CAA/B;;AACA,UAAIiB,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGf,UAAJ,KAAmB,CAAjC,EAAoC;AAClCI,eAAO,CAACY,KAAR,GAAiBC,QAAjB;AACD;;AAOD,UAAI,EAAEV,KAAF,GAAUP,UAAV,KAAyB,CAA7B,EAAgC;AAC9B,YAAMkB,QAAM,GAAG,IAAIb,iBAAJ,EAAf;AACAD,eAAO,CAACe,IAAR,CAAaD,QAAb;AACAf,kBAAU,CAACK,IAAX,CAAgBU,QAAM,CAACT,YAAP,EAAhB;AACD;AACF,KA7BH,EA8BE;AACE,aAAOL,OAAO,CAACgB,MAAR,GAAiB,CAAxB,EAA2B;AACzBhB,eAAO,CAACY,KAAR,GAAiBC,QAAjB;AACD;;AACDd,gBAAU,CAACc,QAAX;AACD,KAnCH,EAoCE,UAACI,GAAD,EAAI;AACF,aAAOjB,OAAO,CAACgB,MAAR,GAAiB,CAAxB,EAA2B;AACzBhB,eAAO,CAACY,KAAR,GAAiBM,KAAjB,CAAuBD,GAAvB;AACD;;AACDlB,gBAAU,CAACmB,KAAX,CAAiBD,GAAjB;AACD,KAzCH,EA0CE;AACEf,YAAM,GAAG,IAAT;AACAF,aAAO,GAAG,IAAV;AACD,KA7CH,CADF;AAiDD,GAzDM,CAAP;AA0DD;;AA7DDmB","names":["windowCount","windowSize","startWindowEvery","startEvery","lift_1","source","subscriber","windows","Subject_1","starts","count","next","asObservable","subscribe","OperatorSubscriber_1","value","windows_1_1","window_1","c","shift","complete","window_2","push","length","err","error","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/windowCount.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n *\n * Ignore every 3rd click event, starting from the first one\n *\n * ```ts\n * import { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3),\n *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n *\n * ```ts\n * import { fromEvent, windowCount, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll() // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of windows, which in turn are\n * Observable of values.\n */\nexport function windowCount<T>(windowSize: number, startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n\n  return operate((source, subscriber) => {\n    let windows = [new Subject<T>()];\n    let starts: number[] = [];\n    let count = 0;\n\n    // Open the first window.\n    subscriber.next(windows[0].asObservable());\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Emit the value through all current windows.\n          // We don't need to create a new window yet, we\n          // do that as soon as we close one.\n          for (const window of windows) {\n            window.next(value);\n          }\n          // Here we're using the size of the window array to figure\n          // out if the oldest window has emitted enough values. We can do this\n          // because the size of the window array is a function of the values\n          // seen by the subscription. If it's time to close it, we complete\n          // it and remove it.\n          const c = count - windowSize + 1;\n          if (c >= 0 && c % startEvery === 0) {\n            windows.shift()!.complete();\n          }\n\n          // Look to see if the next count tells us it's time to open a new window.\n          // TODO: We need to figure out if this really makes sense. We're technically\n          // emitting windows *before* we have a value to emit them for. It's probably\n          // more expected that we should be emitting the window when the start\n          // count is reached -- not before.\n          if (++count % startEvery === 0) {\n            const window = new Subject<T>();\n            windows.push(window);\n            subscriber.next(window.asObservable());\n          }\n        },\n        () => {\n          while (windows.length > 0) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        (err) => {\n          while (windows.length > 0) {\n            windows.shift()!.error(err);\n          }\n          subscriber.error(err);\n        },\n        () => {\n          starts = null!;\n          windows = null!;\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}