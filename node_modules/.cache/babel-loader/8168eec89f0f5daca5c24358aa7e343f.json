{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exhaustAll = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nfunction exhaustAll() {\n  return lift_1.operate(function (source, subscriber) {\n    var isComplete = false;\n    var innerSub = null;\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (inner) {\n      if (!innerSub) {\n        innerSub = innerFrom_1.innerFrom(inner).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        }));\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}\n\nexports.exhaustAll = exhaustAll;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AA8CA,SAAgBA,UAAhB,GAA0B;AACxB,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,QAAQ,GAAwB,IAApC;AACAH,UAAM,CAACI,SAAP,CACEC,8CACEJ,UADF,EAEE,UAACK,KAAD,EAAM;AACJ,UAAI,CAACH,QAAL,EAAe;AACbA,gBAAQ,GAAGI,sBAAUD,KAAV,EAAiBF,SAAjB,CACTC,8CAAyBJ,UAAzB,EAAqCO,SAArC,EAAgD;AAC9CL,kBAAQ,GAAG,IAAX;AACAD,oBAAU,IAAID,UAAU,CAACQ,QAAX,EAAd;AACD,SAHD,CADS,CAAX;AAMD;AACF,KAXH,EAYE;AACEP,gBAAU,GAAG,IAAb;AACA,OAACC,QAAD,IAAaF,UAAU,CAACQ,QAAX,EAAb;AACD,KAfH,CADF;AAmBD,GAtBM,CAAP;AAuBD;;AAxBDC","names":["exhaustAll","lift_1","source","subscriber","isComplete","innerSub","subscribe","OperatorSubscriber_1","inner","innerFrom_1","undefined","complete","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/exhaustAll.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaustAll` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaustAll` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n *\n * Run a finite timer for each click, only if there is no currently active timer\n *\n * ```ts\n * import { fromEvent, map, interval, take, exhaustAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(5)))\n * );\n * const result = higherOrder.pipe(exhaustAll());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable that takes a source of\n * Observables and propagates the first Observable exclusively until it\n * completes before subscribing to the next.\n */\nexport function exhaustAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let isComplete = false;\n    let innerSub: Subscription | null = null;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (inner) => {\n          if (!innerSub) {\n            innerSub = innerFrom(inner).subscribe(\n              createOperatorSubscriber(subscriber, undefined, () => {\n                innerSub = null;\n                isComplete && subscriber.complete();\n              })\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          !innerSub && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}