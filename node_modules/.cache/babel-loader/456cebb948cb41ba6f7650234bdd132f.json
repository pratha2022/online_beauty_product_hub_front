{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zipAll = void 0;\n\nvar zip_1 = require(\"../observable/zip\");\n\nvar joinAllInternals_1 = require(\"./joinAllInternals\");\n\nfunction zipAll(project) {\n  return joinAllInternals_1.joinAllInternals(zip_1.zip, project);\n}\n\nexports.zipAll = zipAll;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAeA,SAAgBA,MAAhB,CAA6BC,OAA7B,EAA4D;AAC1D,SAAOC,oCAAiBC,SAAjB,EAAsBF,OAAtB,CAAP;AACD;;AAFDG","names":["zipAll","project","joinAllInternals_1","zip_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/zipAll.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\nimport { zip } from '../observable/zip';\nimport { joinAllInternals } from './joinAllInternals';\n\n/**\n * Collects all observable inner sources from the source, once the source completes,\n * it will subscribe to all inner sources, combining their values by index and emitting\n * them.\n *\n * @see {@link zipWith}\n * @see {@link zip}\n */\nexport function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function zipAll<T>(): OperatorFunction<any, T[]>;\nexport function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\nexport function zipAll<T, R>(project?: (...values: T[]) => R) {\n  return joinAllInternals(zip, project);\n}\n"]},"metadata":{},"sourceType":"script"}