{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joinAllInternals = void 0;\n\nvar identity_1 = require(\"../util/identity\");\n\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\n\nvar pipe_1 = require(\"../util/pipe\");\n\nvar mergeMap_1 = require(\"./mergeMap\");\n\nvar toArray_1 = require(\"./toArray\");\n\nfunction joinAllInternals(joinFn, project) {\n  return pipe_1.pipe(toArray_1.toArray(), mergeMap_1.mergeMap(function (sources) {\n    return joinFn(sources);\n  }), project ? mapOneOrManyArgs_1.mapOneOrManyArgs(project) : identity_1.identity);\n}\n\nexports.joinAllInternals = joinAllInternals;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAYA,SAAgBA,gBAAhB,CAAuCC,MAAvC,EAAiGC,OAAjG,EAAgI;AAC9H,SAAOC,YAGLC,mBAHK,EAKLC,oBAAS,UAACC,OAAD,EAAQ;AAAK,iBAAM,CAACA,OAAD,CAAN;AAAe,GAArC,CALK,EAOLJ,OAAO,GAAGK,oCAAiBL,OAAjB,CAAH,GAAgCM,mBAPlC,CAAP;AASD;;AAVDC","names":["joinAllInternals","joinFn","project","pipe_1","toArray_1","mergeMap_1","sources","mapOneOrManyArgs_1","identity_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/joinAllInternals.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { mergeMap } from './mergeMap';\nimport { toArray } from './toArray';\n\n/**\n * Collects all of the inner sources from source observable. Then, once the\n * source completes, joins the values using the given static.\n *\n * This is used for {@link combineLatestAll} and {@link zipAll} which both have the\n * same behavior of collecting all inner observables, then operating on them.\n *\n * @param joinFn The type of static join to apply to the sources collected\n * @param project The projection function to apply to the values, if any\n */\nexport function joinAllInternals<T, R>(joinFn: (sources: ObservableInput<T>[]) => Observable<T>, project?: (...args: any[]) => R) {\n  return pipe(\n    // Collect all inner sources into an array, and emit them when the\n    // source completes.\n    toArray() as OperatorFunction<ObservableInput<T>, ObservableInput<T>[]>,\n    // Run the join function on the collected array of inner sources.\n    mergeMap((sources) => joinFn(sources)),\n    // If a projection function was supplied, apply it to each result.\n    project ? mapOneOrManyArgs(project) : (identity as any)\n  );\n}\n"]},"metadata":{},"sourceType":"script"}