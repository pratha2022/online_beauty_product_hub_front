{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnsubscriptionError = void 0;\n\nvar createErrorClass_1 = require(\"./createErrorClass\");\n\nexports.UnsubscriptionError = createErrorClass_1.createErrorClass(function (_super) {\n  return function UnsubscriptionErrorImpl(errors) {\n    _super(this);\n\n    this.message = errors ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) {\n      return i + 1 + \") \" + err.toString();\n    }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n  };\n});","map":{"version":3,"mappings":";;;;;;;AAAA;;AAkBaA,8BAA+CC,oCAC1D,UAACC,MAAD,EAAO;AACL,kBAASC,uBAAT,CAA4CC,MAA5C,EAAsE;AACpEF,UAAM,CAAC,IAAD,CAAN;;AACA,SAAKG,OAAL,GAAeD,MAAM,GACdA,MAAM,CAACE,MAAP,GAAa,2CAAb,GACXF,MAAM,CAACG,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN,EAAO;AAAK,aAAGA,CAAC,GAAG,CAAJ,GAAK,IAAL,GAAUD,GAAG,CAACE,QAAJ,EAAb;AAA6B,KAApD,EAAsDC,IAAtD,CAA2D,MAA3D,CAFyB,GAGjB,EAHJ;AAIA,SAAKC,IAAL,GAAY,qBAAZ;AACA,SAAKR,MAAL,GAAcA,MAAd;AACD,GARD;AAQC,CAVuD,CAA/C","names":["exports","createErrorClass_1","_super","UnsubscriptionErrorImpl","errors","message","length","map","err","i","toString","join","name"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/util/UnsubscriptionError.ts"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n"]},"metadata":{},"sourceType":"script"}