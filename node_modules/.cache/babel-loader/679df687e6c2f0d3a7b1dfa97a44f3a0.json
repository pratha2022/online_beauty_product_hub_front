{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.range = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar empty_1 = require(\"./empty\");\n\nfunction range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    return empty_1.EMPTY;\n  }\n\n  var end = count + start;\n  return new Observable_1.Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n\n    subscriber.complete();\n  });\n}\n\nexports.range = range;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAqDA,SAAgBA,KAAhB,CAAsBC,KAAtB,EAAqCC,KAArC,EAAqDC,SAArD,EAA8E;AAC5E,MAAID,KAAK,IAAI,IAAb,EAAmB;AAEjBA,SAAK,GAAGD,KAAR;AACAA,SAAK,GAAG,CAAR;AACD;;AAED,MAAIC,KAAK,IAAI,CAAb,EAAgB;AAEd,WAAOE,aAAP;AACD;;AAGD,MAAMC,GAAG,GAAGH,KAAK,GAAGD,KAApB;AAEA,SAAO,IAAIK,uBAAJ,CACLH,SAAS,GAEL,UAACI,UAAD,EAAW;AACT,QAAIC,CAAC,GAAGP,KAAR;AACA,WAAOE,SAAS,CAACM,QAAV,CAAmB;AACxB,UAAID,CAAC,GAAGH,GAAR,EAAa;AACXE,kBAAU,CAACG,IAAX,CAAgBF,CAAC,EAAjB;AACA,aAAKC,QAAL;AACD,OAHD,MAGO;AACLF,kBAAU,CAACI,QAAX;AACD;AACF,KAPM,CAAP;AAQD,GAZI,GAcL,UAACJ,UAAD,EAAW;AACT,QAAIC,CAAC,GAAGP,KAAR;;AACA,WAAOO,CAAC,GAAGH,GAAJ,IAAW,CAACE,UAAU,CAACK,MAA9B,EAAsC;AACpCL,gBAAU,CAACG,IAAX,CAAgBF,CAAC,EAAjB;AACD;;AACDD,cAAU,CAACI,QAAX;AACD,GArBA,CAAP;AAuBD;;AAtCDE","names":["range","start","count","scheduler","empty_1","end","Observable_1","subscriber","n","schedule","next","complete","closed","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/observable/range.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { EMPTY } from './empty';\n\nexport function range(start: number, count?: number): Observable<number>;\n\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function range(start: number, count: number | undefined, scheduler: SchedulerLike): Observable<number>;\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n *\n * Produce a range of numbers\n *\n * ```ts\n * import { range } from 'rxjs';\n *\n * const numbers = range(1, 3);\n *\n * numbers.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Logs:\n * // 1\n * // 2\n * // 3\n * // 'Complete!'\n * ```\n *\n * @see {@link timer}\n * @see {@link interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n */\nexport function range(start: number, count?: number, scheduler?: SchedulerLike): Observable<number> {\n  if (count == null) {\n    // If one argument was passed, it's the count, not the start.\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    // No count? We're going nowhere. Return EMPTY.\n    return EMPTY;\n  }\n\n  // Where the range should stop.\n  const end = count + start;\n\n  return new Observable(\n    scheduler\n      ? // The deprecated scheduled path.\n        (subscriber) => {\n          let n = start;\n          return scheduler.schedule(function () {\n            if (n < end) {\n              subscriber.next(n++);\n              this.schedule();\n            } else {\n              subscriber.complete();\n            }\n          });\n        }\n      : // Standard synchronous range.\n        (subscriber) => {\n          let n = start;\n          while (n < end && !subscriber.closed) {\n            subscriber.next(n++);\n          }\n          subscriber.complete();\n        }\n  );\n}\n"]},"metadata":{},"sourceType":"script"}