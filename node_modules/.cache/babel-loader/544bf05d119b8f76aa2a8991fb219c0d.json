{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buffer = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar noop_1 = require(\"../util/noop\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nfunction buffer(closingNotifier) {\n  return lift_1.operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop_1.noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}\n\nexports.buffer = buffer;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAuCA,SAAgBA,MAAhB,CAA0BC,eAA1B,EAA0D;AACxD,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAEhC,QAAIC,aAAa,GAAQ,EAAzB;AAGAF,UAAM,CAACG,SAAP,CACEC,8CACEH,UADF,EAEE,UAACI,KAAD,EAAM;AAAK,0BAAa,CAACC,IAAd,CAAmBD,KAAnB;AAAyB,KAFtC,EAGE;AACEJ,gBAAU,CAACM,IAAX,CAAgBL,aAAhB;AACAD,gBAAU,CAACO,QAAX;AACD,KANH,CADF;AAYAV,mBAAe,CAACK,SAAhB,CACEC,8CACEH,UADF,EAEE;AAEE,UAAMQ,CAAC,GAAGP,aAAV;AACAA,mBAAa,GAAG,EAAhB;AACAD,gBAAU,CAACM,IAAX,CAAgBE,CAAhB;AACD,KAPH,EAQEC,WARF,CADF;AAaA,WAAO;AAELR,mBAAa,GAAG,IAAhB;AACD,KAHD;AAID,GAlCM,CAAP;AAmCD;;AApCDS","names":["buffer","closingNotifier","lift_1","source","subscriber","currentBuffer","subscribe","OperatorSubscriber_1","value","push","next","complete","b","noop_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval, buffer } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    closingNotifier.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on finalization.\n      currentBuffer = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"script"}