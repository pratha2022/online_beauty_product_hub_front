{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapOneOrManyArgs = void 0;\n\nvar map_1 = require(\"../operators/map\");\n\nvar isArray = Array.isArray;\n\nfunction callOrApply(fn, args) {\n  return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);\n}\n\nfunction mapOneOrManyArgs(fn) {\n  return map_1.map(function (args) {\n    return callOrApply(fn, args);\n  });\n}\n\nexports.mapOneOrManyArgs = mapOneOrManyArgs;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEQ,WAAO,GAAKA,KAAK,QAAjB;;AAER,SAASC,WAAT,CAA2BC,EAA3B,EAAwDC,IAAxD,EAAmE;AAC/D,SAAOC,OAAO,CAACD,IAAD,CAAP,GAAgBD,EAAE,MAAF,CAAE,MAAF,EAAEG,yBAAIF,IAAJ,EAAF,CAAhB,GAA8BD,EAAE,CAACC,IAAD,CAAvC;AACH;;AAMD,SAAgBG,gBAAhB,CAAuCJ,EAAvC,EAAkE;AAC9D,SAAOK,UAAI,gBAAI;AAAI,sBAAW,CAACL,EAAD,EAAKC,IAAL,CAAX;AAAqB,GAAjC,CAAP;AACH;;AAFDK","names":["Array","callOrApply","fn","args","isArray","__spreadArray","mapOneOrManyArgs","map_1","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts"],"sourcesContent":["import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}"]},"metadata":{},"sourceType":"script"}