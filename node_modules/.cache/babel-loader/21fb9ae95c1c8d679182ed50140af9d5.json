{"ast":null,"code":"import{categoryGetAPI}from'../service/categoryservice/index';import{FETCH_CATEGORY_REQUEST,FETCH_CATEGORY_SUCCESS,FETCH_CATEGORY_FAILURE}from'../types/CatTypes';export var fetchCategoryRequest=function fetchCategoryRequest(){return{type:FETCH_CATEGORY_REQUEST};};export var fetchCategorySuccess=function fetchCategorySuccess(category){return{type:FETCH_CATEGORY_SUCCESS,payload:category};};export var fetchCategoryFailure=function fetchCategoryFailure(error){return{type:FETCH_CATEGORY_FAILURE,payload:error};};export var catAction=function catAction(){return function(dispatch){dispatch(fetchCategoryRequest);categoryGetAPI().then(function(response){var categories=response.data.data;if(response.status===200){dispatch(fetchCategorySuccess(categories));}}).catch(function(error){var errorMsg=error.message;dispatch(fetchCategoryFailure(errorMsg));});};};","map":{"version":3,"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/src/redux/action/CatAction.tsx"],"names":["categoryGetAPI","FETCH_CATEGORY_REQUEST","FETCH_CATEGORY_SUCCESS","FETCH_CATEGORY_FAILURE","fetchCategoryRequest","type","fetchCategorySuccess","category","payload","fetchCategoryFailure","error","catAction","dispatch","then","response","categories","data","status","catch","errorMsg","message"],"mappings":"AAAA,OAASA,cAAT,KAA+B,kCAA/B,CACA,OAASC,sBAAT,CAAiCC,sBAAjC,CAAyDC,sBAAzD,KAAuF,mBAAvF,CACA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACtC,MAAO,CACHC,IAAI,CAAEJ,sBADH,CAAP,CAGH,CAJM,CAKP,MAAO,IAAMK,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,QAAD,CAAmB,CACnD,MAAO,CACHF,IAAI,CAAEH,sBADH,CAEHM,OAAO,CAAED,QAFN,CAAP,CAIH,CALM,CAMP,MAAO,IAAME,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAgB,CAChD,MAAO,CACHL,IAAI,CAAEF,sBADH,CAEHK,OAAO,CAAEE,KAFN,CAAP,CAIH,CALM,CAMP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC3B,MAAO,UAACC,QAAD,CAAmB,CACtBA,QAAQ,CAACR,oBAAD,CAAR,CACAJ,cAAc,GACTa,IADL,CACU,SAAAC,QAAQ,CAAI,CACd,GAAMC,CAAAA,UAAU,CAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAjC,CACA,GAAIF,QAAQ,CAACG,MAAT,GAAoB,GAAxB,CAA6B,CACzBL,QAAQ,CAACN,oBAAoB,CAACS,UAAD,CAArB,CAAR,CACH,CACJ,CANL,EAOKG,KAPL,CAOW,SAAAR,KAAK,CAAI,CACZ,GAAMS,CAAAA,QAAQ,CAAGT,KAAK,CAACU,OAAvB,CACAR,QAAQ,CAACH,oBAAoB,CAACU,QAAD,CAArB,CAAR,CACH,CAVL,EAWH,CAbD,CAcH,CAfM","sourcesContent":["import { categoryGetAPI } from '../service/categoryservice/index';\nimport { FETCH_CATEGORY_REQUEST, FETCH_CATEGORY_SUCCESS, FETCH_CATEGORY_FAILURE } from '../types/CatTypes';\nexport const fetchCategoryRequest = () => {\n    return {\n        type: FETCH_CATEGORY_REQUEST\n    }\n}\nexport const fetchCategorySuccess = (category: any) => {\n    return {\n        type: FETCH_CATEGORY_SUCCESS,\n        payload: category\n    }\n}\nexport const fetchCategoryFailure = (error: any) => {\n    return {\n        type: FETCH_CATEGORY_FAILURE,\n        payload: error\n    }\n}\nexport const catAction = () => {\n    return (dispatch: any) => {\n        dispatch(fetchCategoryRequest)\n        categoryGetAPI()\n            .then(response => {\n                const categories = response.data.data;\n                if (response.status === 200) {\n                    dispatch(fetchCategorySuccess(categories))\n                }\n            })\n            .catch(error => {\n                const errorMsg = error.message;\n                dispatch(fetchCategoryFailure(errorMsg))\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}