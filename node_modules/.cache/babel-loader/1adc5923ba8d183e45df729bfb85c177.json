{"ast":null,"code":"import{FETCH_LOGIN_REQUEST,FETCH_LOGIN_SUCCESS,FETCH_LOGIN_FAILURE}from'../types/LoginTypes';import{loginAPI}from'../service/loginservice/index';export var fetchLoginRequest=function fetchLoginRequest(){return{type:FETCH_LOGIN_REQUEST};};export var fetchLoginSuccess=function fetchLoginSuccess(data){return{type:FETCH_LOGIN_SUCCESS,payload:data};};export var fetchLoginFailure=function fetchLoginFailure(error){return{type:FETCH_LOGIN_FAILURE,payload:error};};export var LoginAction=function LoginAction(data,onSuccess){return function(dispatch){dispatch(fetchLoginRequest);loginAPI(data).then(function(response){var login=response.data.user;localStorage.setItem('jwt',response.data.jwt);localStorage.setItem('user_details',login.id);if(response.status===200){dispatch(fetchLoginSuccess(login));onSuccess();}}).catch(function(error){var errorMsg=error.message;dispatch(fetchLoginFailure(errorMsg));});};};","map":{"version":3,"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/src/redux/action/LoginAction.tsx"],"names":["FETCH_LOGIN_REQUEST","FETCH_LOGIN_SUCCESS","FETCH_LOGIN_FAILURE","loginAPI","fetchLoginRequest","type","fetchLoginSuccess","data","payload","fetchLoginFailure","error","LoginAction","onSuccess","dispatch","then","response","login","user","localStorage","setItem","jwt","id","status","catch","errorMsg","message"],"mappings":"AAAA,OAASA,mBAAT,CAA8BC,mBAA9B,CAAmDC,mBAAnD,KAA8E,qBAA9E,CACA,OAAQC,QAAR,KAAuB,+BAAvB,CACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CACnC,MAAO,CACHC,IAAI,CAAEL,mBADH,CAAP,CAGH,CAJM,CAKP,MAAO,IAAMM,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,IAAD,CAAe,CAC5C,MAAO,CACHF,IAAI,CAAEJ,mBADH,CAEHO,OAAO,CAAED,IAFN,CAAP,CAIH,CALM,CAMP,MAAO,IAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAgB,CAC7C,MAAO,CACHL,IAAI,CAAEH,mBADH,CAEHM,OAAO,CAAEE,KAFN,CAAP,CAIH,CALM,CAMP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACJ,IAAD,CAAYK,SAAZ,CAA+B,CACtD,MAAO,UAACC,QAAD,CAAmB,CACtBA,QAAQ,CAACT,iBAAD,CAAR,CACAD,QAAQ,CAACI,IAAD,CAAR,CACKO,IADL,CACU,SAAAC,QAAQ,CAAI,CACd,GAAMC,CAAAA,KAAK,CAAGD,QAAQ,CAACR,IAAT,CAAcU,IAA5B,CACAC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA4BJ,QAAQ,CAACR,IAAT,CAAca,GAA1C,EACAF,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqCH,KAAK,CAACK,EAA3C,EACA,GAAIN,QAAQ,CAACO,MAAT,GAAoB,GAAxB,CAA6B,CACzBT,QAAQ,CAACP,iBAAiB,CAACU,KAAD,CAAlB,CAAR,CACAJ,SAAS,GACZ,CACJ,CATL,EAUKW,KAVL,CAUW,SAAAb,KAAK,CAAI,CACZ,GAAMc,CAAAA,QAAQ,CAAGd,KAAK,CAACe,OAAvB,CACAZ,QAAQ,CAACJ,iBAAiB,CAACe,QAAD,CAAlB,CAAR,CACH,CAbL,EAcH,CAhBD,CAiBH,CAlBM","sourcesContent":["import { FETCH_LOGIN_REQUEST, FETCH_LOGIN_SUCCESS, FETCH_LOGIN_FAILURE } from '../types/LoginTypes';\nimport {loginAPI} from '../service/loginservice/index';\nexport const fetchLoginRequest = () => {\n    return {\n        type: FETCH_LOGIN_REQUEST\n    }\n}\nexport const fetchLoginSuccess = (data: any) => {\n    return {\n        type: FETCH_LOGIN_SUCCESS,\n        payload: data\n    }\n}\nexport const fetchLoginFailure = (error: any) => {\n    return {\n        type: FETCH_LOGIN_FAILURE,\n        payload: error\n    }\n}\nexport const LoginAction = (data: any, onSuccess: any) => {\n    return (dispatch: any) => {\n        dispatch(fetchLoginRequest)\n        loginAPI(data)\n            .then(response => {\n                const login = response.data.user;\n                localStorage.setItem('jwt', response.data.jwt);\n                localStorage.setItem('user_details', login.id)\n                if (response.status === 200) {\n                    dispatch(fetchLoginSuccess(login));\n                    onSuccess()\n                }\n            })\n            .catch(error => {\n                const errorMsg = error.message\n                dispatch(fetchLoginFailure(errorMsg))\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}