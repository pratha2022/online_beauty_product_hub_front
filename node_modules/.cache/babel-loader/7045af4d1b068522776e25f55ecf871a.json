{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar concatAll_1 = require(\"./concatAll\");\n\nvar args_1 = require(\"../util/args\");\n\nvar from_1 = require(\"../observable/from\");\n\nfunction concat() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = args_1.popScheduler(args);\n  return lift_1.operate(function (source, subscriber) {\n    concatAll_1.concatAll()(from_1.from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}\n\nexports.concat = concat;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAYA,SAAgBA,MAAhB,GAAsB;AAAO;;OAAA,yCAAc;AAAdC;;;AAC3B,MAAMC,SAAS,GAAGC,oBAAaF,IAAb,CAAlB;AACA,SAAOG,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChCC,4BAAYC,YAAIC,eAAEJ,MAAF,GAAQK,OAAKT,IAAL,CAAR,CAAJ,EAAwBC,SAAxB,CAAZ,EAAgDS,SAAhD,CAA0DL,UAA1D;AACD,GAFM,CAAP;AAGD;;AALDM","names":["concat","args","scheduler","args_1","lift_1","source","subscriber","concatAll_1","from_1","__spreadArray","__read","subscribe","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/concat.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { concatAll } from './concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from '../observable/from';\n\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * @deprecated Replaced with {@link concatWith}. Will be removed in v8.\n */\nexport function concat<T, R>(...args: any[]): OperatorFunction<T, R> {\n  const scheduler = popScheduler(args);\n  return operate((source, subscriber) => {\n    concatAll()(from([source, ...args], scheduler)).subscribe(subscriber);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}