{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bindCallbackInternals = void 0;\n\nvar isScheduler_1 = require(\"../util/isScheduler\");\n\nvar Observable_1 = require(\"../Observable\");\n\nvar subscribeOn_1 = require(\"../operators/subscribeOn\");\n\nvar mapOneOrManyArgs_1 = require(\"../util/mapOneOrManyArgs\");\n\nvar observeOn_1 = require(\"../operators/observeOn\");\n\nvar AsyncSubject_1 = require(\"../AsyncSubject\");\n\nfunction bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler_1.isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n\n  if (scheduler) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));\n    };\n  }\n\n  return function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var subject = new AsyncSubject_1.AsyncSubject();\n    var uninitialized = true;\n    return new Observable_1.Observable(function (subscriber) {\n      var subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        var isAsync_1 = false;\n        var isComplete_1 = false;\n        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [function () {\n          var results = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            results[_i] = arguments[_i];\n          }\n\n          if (isNodeStyle) {\n            var err = results.shift();\n\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete_1 = true;\n\n          if (isAsync_1) {\n            subject.complete();\n          }\n        }]));\n\n        if (isComplete_1) {\n          subject.complete();\n        }\n\n        isAsync_1 = true;\n      }\n\n      return subs;\n    });\n  };\n}\n\nexports.bindCallbackInternals = bindCallbackInternals;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,SAAgBA,qBAAhB,CACEC,WADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,SAJF,EAI2B;AAEzB,MAAID,cAAJ,EAAoB;AAClB,QAAIE,0BAAYF,cAAZ,CAAJ,EAAiC;AAC/BC,eAAS,GAAGD,cAAZ;AACD,KAFD,MAEO;AAEL,aAAO;AAAqB;;aAAA,yCAAc;AAAdG;;;AAC1B,eAAQN,qBAAqB,CAACC,WAAD,EAAcC,YAAd,EAA4BE,SAA5B,CAArB,CACLG,KADK,CACC,IADD,EACOD,IADP,EAELE,IAFK,CAEAC,oCAAiBN,cAAjB,CAFA,CAAR;AAGD,OAJD;AAKD;AACF;;AAID,MAAIC,SAAJ,EAAe;AACb,WAAO;AAAqB;;WAAA,yCAAc;AAAdE;;;AAC1B,aAAQN,qBAAqB,CAACC,WAAD,EAAcC,YAAd,CAArB,CACLK,KADK,CACC,IADD,EACOD,IADP,EAELE,IAFK,CAEAE,0BAAYN,SAAZ,CAFA,EAEyBO,sBAAUP,SAAV,CAFzB,CAAR;AAGD,KAJD;AAKD;;AAED,SAAO;AAAA;;AAAqB;;SAAA,yCAAc;AAAdE;;;AAG1B,QAAMM,OAAO,GAAG,IAAIC,2BAAJ,EAAhB;AAGA,QAAIC,aAAa,GAAG,IAApB;AACA,WAAO,IAAIC,uBAAJ,CAAe,UAACC,UAAD,EAAW;AAE/B,UAAMC,IAAI,GAAGL,OAAO,CAACM,SAAR,CAAkBF,UAAlB,CAAb;;AAEA,UAAIF,aAAJ,EAAmB;AACjBA,qBAAa,GAAG,KAAhB;AAMA,YAAIK,SAAO,GAAG,KAAd;AAGA,YAAIC,YAAU,GAAG,KAAjB;AAKAlB,oBAAY,CAACK,KAAb,CAEEc,KAFF,EAEMC,uCAGChB,IAHD,IAGK,CAEP;AAAC;;eAAA,yCAAiB;AAAjBiB;;;AACC,cAAItB,WAAJ,EAAiB;AAIf,gBAAMuB,GAAG,GAAGD,OAAO,CAACE,KAAR,EAAZ;;AACA,gBAAID,GAAG,IAAI,IAAX,EAAiB;AACfZ,qBAAO,CAACc,KAAR,CAAcF,GAAd;AAGA;AACD;AACF;;AAKDZ,iBAAO,CAACe,IAAR,CAAa,IAAIJ,OAAO,CAACK,MAAZ,GAAqBL,OAArB,GAA+BA,OAAO,CAAC,CAAD,CAAnD;AAGAH,sBAAU,GAAG,IAAb;;AAMA,cAAID,SAAJ,EAAa;AACXP,mBAAO,CAACiB,QAAR;AACD;AACF,SA/BM,CAHL,CAFN;;AA0CA,YAAIT,YAAJ,EAAgB;AACdR,iBAAO,CAACiB,QAAR;AACD;;AAIDV,iBAAO,GAAG,IAAV;AACD;;AAGD,aAAOF,IAAP;AACD,KAxEM,CAAP;AAyED,GAhFD;AAiFD;;AA9GDa","names":["bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","scheduler","isScheduler_1","args","apply","pipe","mapOneOrManyArgs_1","subscribeOn_1","observeOn_1","subject","AsyncSubject_1","uninitialized","Observable_1","subscriber","subs","subscribe","isAsync_1","isComplete_1","_this","__spreadArray","results","err","shift","error","next","length","complete","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/observable/bindCallbackInternals.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\n\nexport function bindCallbackInternals(\n  isNodeStyle: boolean,\n  callbackFunc: any,\n  resultSelector?: any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // The user provided a result selector.\n      return function (this: any, ...args: any[]) {\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector as any));\n      };\n    }\n  }\n\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\n  // to compose that behavior for the user.\n  if (scheduler) {\n    return function (this: any, ...args: any[]) {\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\n    };\n  }\n\n  return function (this: any, ...args: any[]): Observable<any> {\n    // We're using AsyncSubject, because it emits when it completes,\n    // and it will play the value to all late-arriving subscribers.\n    const subject = new AsyncSubject<any>();\n\n    // If this is true, then we haven't called our function yet.\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      // Add our subscriber to the subject.\n      const subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        // We're going to execute the bound function\n        // This bit is to signal that we are hitting the callback asychronously.\n        // Because we don't have any anti-\"Zalgo\" gaurantees with whatever\n        // function we are handed, we use this bit to figure out whether or not\n        // we are getting hit in a callback synchronously during our call.\n        let isAsync = false;\n\n        // This is used to signal that the callback completed synchronously.\n        let isComplete = false;\n\n        // Call our function that has a callback. If at any time during this\n        // call, an error is thrown, it will be caught by the Observable\n        // subscription process and sent to the consumer.\n        callbackFunc.apply(\n          // Pass the appropriate `this` context.\n          this,\n          [\n            // Pass the arguments.\n            ...args,\n            // And our callback handler.\n            (...results: any[]) => {\n              if (isNodeStyle) {\n                // If this is a node callback, shift the first value off of the\n                // results and check it, as it is the error argument. By shifting,\n                // we leave only the argument(s) we want to pass to the consumer.\n                const err = results.shift();\n                if (err != null) {\n                  subject.error(err);\n                  // If we've errored, we can stop processing this function\n                  // as there's nothing else to do. Just return to escape.\n                  return;\n                }\n              }\n              // If we have one argument, notify the consumer\n              // of it as a single value, otherwise, if there's more than one, pass\n              // them as an array. Note that if there are no arguments, `undefined`\n              // will be emitted.\n              subject.next(1 < results.length ? results : results[0]);\n              // Flip this flag, so we know we can complete it in the synchronous\n              // case below.\n              isComplete = true;\n              // If we're not asynchronous, we need to defer the `complete` call\n              // until after the call to the function is over. This is because an\n              // error could be thrown in the function after it calls our callback,\n              // and if that is the case, if we complete here, we are unable to notify\n              // the consumer than an error occured.\n              if (isAsync) {\n                subject.complete();\n              }\n            },\n          ]\n        );\n        // If we flipped `isComplete` during the call, we resolved synchronously,\n        // notify complete, because we skipped it in the callback to wait\n        // to make sure there were no errors during the call.\n        if (isComplete) {\n          subject.complete();\n        }\n\n        // We're no longer synchronous. If the callback is called at this point\n        // we can notify complete on the spot.\n        isAsync = true;\n      }\n\n      // Return the subscription fron adding our subscriber to the subject.\n      return subs;\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"script"}