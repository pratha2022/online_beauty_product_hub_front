{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withLatestFrom = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar identity_1 = require(\"../util/identity\");\n\nvar noop_1 = require(\"../util/noop\");\n\nvar args_1 = require(\"../util/args\");\n\nfunction withLatestFrom() {\n  var inputs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    inputs[_i] = arguments[_i];\n  }\n\n  var project = args_1.popResultSelector(inputs);\n  return lift_1.operate(function (source, subscriber) {\n    var len = inputs.length;\n    var otherValues = new Array(len);\n    var hasValue = inputs.map(function () {\n      return false;\n    });\n    var ready = false;\n\n    var _loop_1 = function _loop_1(i) {\n      innerFrom_1.innerFrom(inputs[i]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n        otherValues[i] = value;\n\n        if (!ready && !hasValue[i]) {\n          hasValue[i] = true;\n          (ready = hasValue.every(identity_1.identity)) && (hasValue = null);\n        }\n      }, noop_1.noop));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      if (ready) {\n        var values = __spreadArray([value], __read(otherValues));\n\n        subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);\n      }\n    }));\n  });\n}\n\nexports.withLatestFrom = withLatestFrom;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAmDA,SAAgBA,cAAhB,GAA8B;AAAO;;OAAA,yCAAgB;AAAhBC;;;AACnC,MAAMC,OAAO,GAAGC,yBAAkBF,MAAlB,CAAhB;AAEA,SAAOG,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAMC,GAAG,GAAGN,MAAM,CAACO,MAAnB;AACA,QAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAApB;AAIA,QAAII,QAAQ,GAAGV,MAAM,CAACW,GAAP,CAAW;AAAM;AAAK,KAAtB,CAAf;AAGA,QAAIC,KAAK,GAAG,KAAZ;;mCAMSC,GAAC;AACRC,4BAAUd,MAAM,CAACa,CAAD,CAAhB,EAAqBE,SAArB,CACEC,8CACEX,UADF,EAEE,UAACY,KAAD,EAAM;AACJT,mBAAW,CAACK,CAAD,CAAX,GAAiBI,KAAjB;;AACA,YAAI,CAACL,KAAD,IAAU,CAACF,QAAQ,CAACG,CAAD,CAAvB,EAA4B;AAE1BH,kBAAQ,CAACG,CAAD,CAAR,GAAc,IAAd;AAKA,WAACD,KAAK,GAAGF,QAAQ,CAACQ,KAAT,CAAeC,mBAAf,CAAT,MAAuCT,QAAQ,GAAG,IAAlD;AACD;AACF,OAbH,EAgBEU,WAhBF,CADF;;;AADF,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAApB,EAAyBO,CAAC,EAA1B,EAA4B;cAAnBA;AAqBR;;AAGDT,UAAM,CAACW,SAAP,CACEC,8CAAyBX,UAAzB,EAAqC,UAACY,KAAD,EAAM;AACzC,UAAIL,KAAJ,EAAW;AAET,YAAMS,MAAM,kBAAIJ,KAAJ,GAASK,OAAKd,WAAL,CAAT,CAAZ;;AACAH,kBAAU,CAACkB,IAAX,CAAgBtB,OAAO,GAAGA,OAAO,MAAP,CAAO,MAAP,EAAOuB,yBAAIH,MAAJ,EAAP,CAAH,GAAwBA,MAA/C;AACD;AACF,KAND,CADF;AASD,GAhDM,CAAP;AAiDD;;AApDDI","names":["withLatestFrom","inputs","project","args_1","lift_1","source","subscriber","len","length","otherValues","Array","hasValue","map","ready","i","innerFrom_1","subscribe","OperatorSubscriber_1","value","every","identity_1","noop_1","values","__read","next","__spreadArray","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/withLatestFrom.ts"],"sourcesContent":["import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n *\n * On every click event, emit an array with the latest timer event plus the click event\n *\n * ```ts\n * import { fromEvent, interval, withLatestFrom } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}