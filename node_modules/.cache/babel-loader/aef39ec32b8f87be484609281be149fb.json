{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnonymousSubject = exports.Subject = void 0;\n\nvar Observable_1 = require(\"./Observable\");\n\nvar Subscription_1 = require(\"./Subscription\");\n\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\n\nvar arrRemove_1 = require(\"./util/arrRemove\");\n\nvar errorContext_1 = require(\"./util/errorContext\");\n\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.closed = false;\n    _this.currentObservers = null;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    }\n  };\n\n  Subject.prototype.next = function (value) {\n    var _this = this;\n\n    errorContext_1.errorContext(function () {\n      var e_1, _a;\n\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        if (!_this.currentObservers) {\n          _this.currentObservers = Array.from(_this.observers);\n        }\n\n        try {\n          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var observer = _c.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n\n  Subject.prototype.error = function (err) {\n    var _this = this;\n\n    errorContext_1.errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n\n  Subject.prototype.complete = function () {\n    var _this = this;\n\n    errorContext_1.errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  };\n\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function get() {\n      var _a;\n\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return this._innerSubscribe(subscriber);\n  };\n\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _this = this;\n\n    var _a = this,\n        hasError = _a.hasError,\n        isStopped = _a.isStopped,\n        observers = _a.observers;\n\n    if (hasError || isStopped) {\n      return Subscription_1.EMPTY_SUBSCRIPTION;\n    }\n\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription_1.Subscription(function () {\n      _this.currentObservers = null;\n      arrRemove_1.arrRemove(observers, subscriber);\n    });\n  };\n\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable_1.Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable_1.Observable);\n\nexports.Subject = Subject;\n\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : Subscription_1.EMPTY_SUBSCRIPTION;\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexports.AnonymousSubject = AnonymousSubject;","map":{"version":3,"mappings":"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","names":["__extends","_super","_this","Subject","operator","subject","AnonymousSubject","closed","ObjectUnsubscribedError_1","value","errorContext_1","_throwIfClosed","isStopped","currentObservers","Array","from","observers","_c","observer","next","err","hasError","thrownError","length","shift","error","complete","Object","_a","subscriber","_trySubscribe","call","_checkFinalizedStatuses","_innerSubscribe","Subscription_1","push","arrRemove_1","observable","Observable_1","source","destination","exports","_b","subscribe"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}