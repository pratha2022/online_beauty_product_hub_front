{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.windowWhen = void 0;\n\nvar Subject_1 = require(\"../Subject\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nfunction windowWhen(closingSelector) {\n  return lift_1.operate(function (source, subscriber) {\n    var window;\n    var closingSubscriber;\n\n    var handleError = function handleError(err) {\n      window.error(err);\n      subscriber.error(err);\n    };\n\n    var openWindow = function openWindow() {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window === null || window === void 0 ? void 0 : window.complete();\n      window = new Subject_1.Subject();\n      subscriber.next(window.asObservable());\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom_1.innerFrom(closingSelector());\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      closingNotifier.subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openWindow, openWindow, handleError));\n    };\n\n    openWindow();\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      return window.next(value);\n    }, function () {\n      window.complete();\n      subscriber.complete();\n    }, handleError, function () {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window = null;\n    }));\n  });\n}\n\nexports.windowWhen = windowWhen;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAEA;;AACA;;AACA;;AA8CA,SAAgBA,UAAhB,CAA8BC,eAA9B,EAAyE;AACvE,SAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,MAAJ;AACA,QAAIC,iBAAJ;;AAMA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3BH,YAAO,CAACI,KAAR,CAAcD,GAAd;AACAJ,gBAAU,CAACK,KAAX,CAAiBD,GAAjB;AACD,KAHD;;AAWA,QAAME,UAAU,GAAG,SAAbA,UAAa;AAGjBJ,uBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAEK,WAAnB;AAGAN,YAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEO,QAAR;AAGAP,YAAM,GAAG,IAAIQ,iBAAJ,EAAT;AACAT,gBAAU,CAACU,IAAX,CAAgBT,MAAM,CAACU,YAAP,EAAhB;AAGA,UAAIC,eAAJ;;AACA,UAAI;AACFA,uBAAe,GAAGC,sBAAUhB,eAAe,EAAzB,CAAlB;AACD,OAFD,CAEE,OAAOO,GAAP,EAAY;AACZD,mBAAW,CAACC,GAAD,CAAX;AACA;AACD;;AAMDQ,qBAAe,CAACE,SAAhB,CAA2BZ,iBAAiB,GAAGa,8CAAyBf,UAAzB,EAAqCM,UAArC,EAAiDA,UAAjD,EAA6DH,WAA7D,CAA/C;AACD,KA1BD;;AA6BAG,cAAU;AAGVP,UAAM,CAACe,SAAP,CACEC,8CACEf,UADF,EAEE,UAACgB,KAAD,EAAM;AAAK,mBAAO,CAACN,IAAR,CAAaM,KAAb;AAAmB,KAFhC,EAGE;AAEEf,YAAO,CAACO,QAAR;AACAR,gBAAU,CAACQ,QAAX;AACD,KAPH,EAQEL,WARF,EASE;AAGED,uBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAEK,WAAnB;AACAN,YAAM,GAAG,IAAT;AACD,KAdH,CADF;AAkBD,GArEM,CAAP;AAsED;;AAvEDgB","names":["windowWhen","closingSelector","lift_1","source","subscriber","window","closingSubscriber","handleError","err","error","openWindow","unsubscribe","complete","Subject_1","next","asObservable","closingNotifier","innerFrom_1","subscribe","OperatorSubscriber_1","value","exports"],"sources":["/media/bytes-pratha/workspaces/projects/online_beauty_product_hub_front/node_modules/rxjs/src/internal/operators/windowWhen.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n *\n * Emit only the first two clicks events in every window of [1-5] random seconds\n *\n * ```ts\n * import { fromEvent, windowWhen, interval, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowWhen<T>(closingSelector: () => ObservableInput<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let window: Subject<T> | null;\n    let closingSubscriber: Subscriber<any> | undefined;\n\n    /**\n     * When we get an error, we have to notify both the\n     * destiation subscriber and the window.\n     */\n    const handleError = (err: any) => {\n      window!.error(err);\n      subscriber.error(err);\n    };\n\n    /**\n     * Called every time we need to open a window.\n     * Recursive, as it will start the closing notifier, which\n     * inevitably *should* call openWindow -- but may not if\n     * it is a \"never\" observable.\n     */\n    const openWindow = () => {\n      // We need to clean up our closing subscription,\n      // we only cared about the first next or complete notification.\n      closingSubscriber?.unsubscribe();\n\n      // Close our window before starting a new one.\n      window?.complete();\n\n      // Start the new window.\n      window = new Subject<T>();\n      subscriber.next(window.asObservable());\n\n      // Get our closing notifier.\n      let closingNotifier: Observable<any>;\n      try {\n        closingNotifier = innerFrom(closingSelector());\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      // Subscribe to the closing notifier, be sure\n      // to capture the subscriber (aka Subscription)\n      // so we can clean it up when we close the window\n      // and open a new one.\n      closingNotifier.subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openWindow, openWindow, handleError)));\n    };\n\n    // Start the first window.\n    openWindow();\n\n    // Subscribe to the source\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => window!.next(value),\n        () => {\n          // The source completed, close the window and complete.\n          window!.complete();\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Be sure to clean up our closing subscription\n          // when this tears down.\n          closingSubscriber?.unsubscribe();\n          window = null!;\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}